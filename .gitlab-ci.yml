variables:
  TF_ROOT: ${CI_PROJECT_DIR}/deploy/payer/
  ENVIRONMENT_NAME: "payer"

#cache:
#  paths:
#    - ${TF_ROOT}

before_script:
  - cd ${TF_ROOT}
  - export AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY
  - export AWS_DEFAULT_REGION

stages:
- init
- validate
- plan
- apply

# image: alpine/terragrunt:1.1.9-eks #image version = TF version. TG is nightly latest
image: 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/terragrunt:1.1.9-eks

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS # && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

init:
  stage: init
  script:
    - terragrunt run-all init
  allow_failure: false


validate:
  stage: validate
  needs: 
    - job: init
  dependencies:
    - init
  script:
    - terragrunt run-all validate
  allow_failure: false

test plan:
  stage: plan
  needs:
    - job: init
    - job: validate  
  only:
    - merge_requests
  script:
    - terragrunt run-all plan --terragrunt-non-interactive
  allow_failure: false  


 
final plan:
  stage: plan
  needs:
    - job: init
    - job: validate  
  only:
    - main
  script:
    - terragrunt plan-all --terragrunt-non-interactive 
  # Ensure that only one instance of this job can run in case multiple workflows are launched in parallel
  resource_group: $ENVIRONMENT_NAME


apply:
  stage: apply
  dependencies:
    - final plan     
  only:
    - main
  script:
    - terragrunt apply-all --terragrunt-non-interactive 
  # Ensure that only one instance of this job can run in case multiple workflows are launched in parallel
  resource_group: $ENVIRONMENT_NAME    

